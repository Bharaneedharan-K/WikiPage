{"ast":null,"code":"var _jsxFileName = \"E:\\\\Project\\\\login\\\\src\\\\components\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useGoogleLogin } from '@react-oauth/google';\nimport axios from 'axios';\nimport './LoginPage.css'; // Your CSS file for styles\nimport logo from './assets/logo.png'; // Your logo image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [adminEmails, setAdminEmails] = useState([]); // State to store admin emails\n\n  // Function to fetch admin emails from the server\n  const fetchAdminEmails = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/admins');\n      setAdminEmails(response.data.map(admin => admin.emailId)); // Store email IDs in state\n      console.log(\"Fetched Admin Emails:\", response.data); // Log fetched emails\n    } catch (err) {\n      console.error('Error fetching admin emails:', err);\n      setError('Failed to fetch admin emails');\n    }\n  };\n  useEffect(() => {\n    fetchAdminEmails(); // Call the fetch function when the component mounts\n  }, []);\n\n  // Hook for Google login\n  const googleLogin = useGoogleLogin({\n    onSuccess: async tokenResponse => {\n      console.log(tokenResponse);\n      try {\n        const res = await axios.get('https://www.googleapis.com/oauth2/v3/userinfo', {\n          headers: {\n            Authorization: `Bearer ${tokenResponse.access_token}`\n          }\n        });\n        const userInfo = res.data; // Store user details\n        console.log(\"User Info:\", userInfo); // Log user info for debugging\n\n        // Prepare the email array for the checkRoles API\n        const emailArray = [userInfo.email];\n\n        // Check roles in the backend\n        const roleResponse = await axios.post('http://localhost:5000/api/checkRoles', {\n          emails: emailArray\n        });\n        const roleData = roleResponse.data.roles; // Access roles data from response\n\n        // Redirect based on user role\n        if (roleData[userInfo.email] === 'admin') {\n          window.location.href = 'http://localhost:3000/admin/dashboard'; // Redirect to Admin Dashboard\n        } else {\n          window.location.href = 'http://localhost:3000/faculty/dashboard'; // Redirect to Faculty Dashboard\n        }\n      } catch (err) {\n        console.error('Failed to fetch user info', err);\n        setError('Failed to fetch user details');\n      }\n    },\n    onError: () => {\n      console.log('Login Failed');\n      setError('Login Failed');\n    }\n  });\n  const handleAdminPageClick = () => {\n    googleLogin(); // Trigger Google login for Admin\n  };\n  const handleFacultyPageClick = () => {\n    googleLogin(); // Trigger Google login for Faculty\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"welcome-text\",\n        children: \"Welcome Back!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Bannari Amman Institute of Technology\",\n        className: \"login-logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"divider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Admin Email IDs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: adminEmails.map((email, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"google-sign-in\",\n        onClick: handleAdminPageClick,\n        children: \"Admin Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"google-sign-in\",\n        onClick: handleFacultyPageClick,\n        children: \"Faculty Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"sign-in-text\",\n        children: \"Sign in with your BIT account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginPage, \"PYR/jtEcTjskuS6qNjq8TxwT8x4=\", false, function () {\n  return [useGoogleLogin];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useEffect","useState","useGoogleLogin","axios","logo","jsxDEV","_jsxDEV","LoginPage","_s","error","setError","adminEmails","setAdminEmails","fetchAdminEmails","response","get","data","map","admin","emailId","console","log","err","googleLogin","onSuccess","tokenResponse","res","headers","Authorization","access_token","userInfo","emailArray","email","roleResponse","post","emails","roleData","roles","window","location","href","onError","handleAdminPageClick","handleFacultyPageClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","index","onClick","_c","$RefreshReg$"],"sources":["E:/Project/login/src/components/LoginPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useGoogleLogin } from '@react-oauth/google';\r\nimport axios from 'axios';\r\nimport './LoginPage.css';  // Your CSS file for styles\r\nimport logo from './assets/logo.png';  // Your logo image\r\n\r\nconst LoginPage = () => {\r\n  const [error, setError] = useState(null);\r\n  const [adminEmails, setAdminEmails] = useState([]); // State to store admin emails\r\n\r\n  // Function to fetch admin emails from the server\r\n  const fetchAdminEmails = async () => {\r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/admins');\r\n      setAdminEmails(response.data.map(admin => admin.emailId)); // Store email IDs in state\r\n      console.log(\"Fetched Admin Emails:\", response.data); // Log fetched emails\r\n    } catch (err) {\r\n      console.error('Error fetching admin emails:', err);\r\n      setError('Failed to fetch admin emails');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAdminEmails(); // Call the fetch function when the component mounts\r\n  }, []);\r\n\r\n  // Hook for Google login\r\n  const googleLogin = useGoogleLogin({\r\n    onSuccess: async tokenResponse => {\r\n      console.log(tokenResponse);\r\n      try {\r\n        const res = await axios.get('https://www.googleapis.com/oauth2/v3/userinfo', {\r\n          headers: {\r\n            Authorization: `Bearer ${tokenResponse.access_token}`,\r\n          },\r\n        });\r\n\r\n        const userInfo = res.data;  // Store user details\r\n        console.log(\"User Info:\", userInfo); // Log user info for debugging\r\n\r\n        // Prepare the email array for the checkRoles API\r\n        const emailArray = [userInfo.email];\r\n\r\n        // Check roles in the backend\r\n        const roleResponse = await axios.post('http://localhost:5000/api/checkRoles', {\r\n          emails: emailArray,\r\n        });\r\n\r\n        const roleData = roleResponse.data.roles; // Access roles data from response\r\n\r\n        // Redirect based on user role\r\n        if (roleData[userInfo.email] === 'admin') {\r\n          window.location.href = 'http://localhost:3000/admin/dashboard';  // Redirect to Admin Dashboard\r\n        } else {\r\n          window.location.href = 'http://localhost:3000/faculty/dashboard';  // Redirect to Faculty Dashboard\r\n        }\r\n      } catch (err) {\r\n        console.error('Failed to fetch user info', err);\r\n        setError('Failed to fetch user details');\r\n      }\r\n    },\r\n    onError: () => {\r\n      console.log('Login Failed');\r\n      setError('Login Failed');\r\n    },\r\n  });\r\n\r\n  const handleAdminPageClick = () => {\r\n    googleLogin(); // Trigger Google login for Admin\r\n  };\r\n\r\n  const handleFacultyPageClick = () => {\r\n    googleLogin(); // Trigger Google login for Faculty\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <div className=\"login-container\">\r\n        <h2 className=\"welcome-text\">Welcome Back!</h2>\r\n        <img\r\n          src={logo}\r\n          alt=\"Bannari Amman Institute of Technology\"\r\n          className=\"login-logo\"\r\n        />\r\n        <hr className=\"divider\" />\r\n        {error && <p>{error}</p>}\r\n        \r\n        {/* Display the fetched admin email IDs */}\r\n        <h3>Admin Email IDs:</h3>\r\n        <ul>\r\n          {adminEmails.map((email, index) => (\r\n            <li key={index}>{email}</li>\r\n          ))}\r\n        </ul>\r\n\r\n        <button className=\"google-sign-in\" onClick={handleAdminPageClick}>Admin Sign In</button>\r\n        <p></p>\r\n        <button className=\"google-sign-in\" onClick={handleFacultyPageClick}>Faculty Sign In</button>\r\n        <p className=\"sign-in-text\">Sign in with your BIT account</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}